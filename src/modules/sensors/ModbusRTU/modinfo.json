{
    "menuSection": "sensors",
    "configItem": [
        {
            "global": 0,
            "name": "ModbusNode",
            "type": "Reading",
            "subtype": "mbNode",
            "id": "mbNode",
            "widget": "anydataTmp",
            "page": "Modbus",
            "descr": "Данные modbus",
            "int": 5,
            "func": "0x03",
            "addr": 1,
            "reg": "0x0000",
            "count": 1,
            "float": 1,
            "round": 0,
            "debug": 1
        },
        {
            "global": 0,
            "name": "ModbusMaster",
            "type": "Reading",
            "subtype": "mbMaster",
            "id": "mb",
            "widget": "anydataTmp",
            "page": "Modbus",
            "descr": "Настройки modbus",
            "int": 5,
            "RX": 18,
            "TX": 19,
            "DIR_PIN": 4,
            "baud": 9600,
            "protocol": "SERIAL_8N2",
            "debug": 1
        }
    ],
    "about": {
        "authorName": "Serghei Crasnicov",
        "authorContact": "https://t.me/Serghei63",
        "authorGit": "https://github.com/Serghei63",
        "specialThanks": "Mit4bmw",
        "moduleName": "ModbusRTU",
        "moduleVersion": "2.0",
        "usedRam": {
            "esp32_4mb": 15,
            "esp8266_4mb": 15
        },
        "subTypes": [
            "mbNode",
            "mbMaster"
        ],
        "title": "ModbusMaster",
        "moduleDesc": "Позволяет управлять оборудованием по протоколу modbus",
        "propInfo": {
            "func": "Функция modbus",
            "addr": "Адрес slav",
            "reg": "Адрес регистра",
            "count": "Количество регистров. В ModbusNode 16-разядные регистры можно считать не более 2 в ноде. Для битовых данных не более 16 бит в ноде. Значение поместится в value Ноды",
            "float": "Тип считываемых данных, если count=2, то данные могут быть long (указать 0) или float (указать 1). Числа Long не рекомендуются (на больших числах не будет точности), так как будет ограничено точность представление в IotManager идет во float",
            "int": "Количество секунд между опросами датчика.",
            "RX": "Пин RX",
            "TX": "Пин TX",
            "DIR_PIN": "connect DR, RE pin of MAX485 to gpio, указать 0 если не нужен",
            "baud": "скорость Uart",
            "protocol": "Протокол Uart: SERIAL_8N1 или SERIAL_8N2",
            "debug": " 1 - включить вывод дебага , 0 - отключить дебаг"
        },
        "funcInfo": [
            {
                "name": "readCoils",
                "descr": "Чтение койла (битового поля). Функция 0х01 протокола. Читает не более 16 бит за раз. Пример: mb.readCoils(1, \"0х0000\", 1)",
                "params": ["Адрес","Регистр","Кличество бит"]
            },
            {
                "name": "readDiscreteInputs",
                "descr": "Чтение дискретного выхода (битового поля). Функция 0х02 протокола. Читает не более 16 бит за раз. Пример: mb.readDiscreteInputs(1, \"0х0000\", 8)",
                "params": ["Адрес","Регистр","Кличество бит"]
                
            },
            {   
                "name": "readHoldingRegisters",
                "descr": "Запрос данных регистра. Функция 0х03 протокола. Читает не более двух регистров за раз. Пример: mb.readHoldingRegisters(1, \"0х0000\", 1, 0)",
                "params": ["Адрес","Регистр","Кличество регистров","1-float, 0-long"]
            },
            {
                "name": "readInputRegisters",
                "descr": "Запрос данных регистра. Функция 0х04 протокола. Читает не более двух регистров за раз. Пример: mb.readInputRegisters(1, \"0х0000\", 1, 0)",
                "params": ["Адрес","Регистр","Кличество регистров","1-float, 0-long"]
            },
            {
                "name": "writeSingleCoils",
                "descr": "Запись в койл (битовое поле) одного бита. Функция 0х05 протокола. Пример: mb.writeSingleCoils(1, \"0х0000\", 1)",
                "params": ["Адрес","Регистр","Данные"]
            },
            {   
                "name": "writeSingleRegister",
                "descr": "Запись данных в один регистр. Функция 0х06 протокола. Пример: mb.writeSingleRegister(1, \"0х0000\", 128)",
                "params": ["Адрес","Регистр","Данные"]
            }, 
            {
                "name": "writeMultipleCoils",
                "descr": "Запись данных в несколько койлов до 16 (число от 0 до 65535). Функция 0x0F протокола. Пример: mb.writeMultipleCoils(1, \"0х0000\", 4, 3) - будут записаны в четыре бита 0011",
                "params": ["Адрес","Регистр","Кличество койлов (бит)","Данные"]
            },
            {
                "name": "writeMultipleRegisters",
                "descr": "Запись данных в несколько регистров. На данный момент записывает 2(два) регистра!!!!! Подходит для записи float?? Функция 0х10 протокола. Пример: mb.writeMultipleRegisters(1, \"0х0000\", 1234.987)",
                "params": ["Адрес","Регистр","Данные"]
            }
        ]
    },
    "defActive": false,
    "usedLibs": {
        "esp32*": [
            "https://github.com/4-20ma/ModbusMaster"
        ],
        "esp82*": [
            "https://github.com/4-20ma/ModbusMaster"
        ]
    }
}